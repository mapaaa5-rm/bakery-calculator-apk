name: Buildozer Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential \
            git \
            zip \
            unzip \
            openjdk-17-jdk \
            libncurses5 \
            libncurses5-dev \
            libtinfo5 \
            cmake \
            pkg-config \
            autoconf \
            automake \
            libtool \
            python3-dev \
            python3-pip \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            zlib1g-dev \
            libjpeg-dev \
            libpng-dev \
            libfreetype6-dev

      - name: Install Buildozer
        run: |
          python3 -m pip install --upgrade pip
          pip install --upgrade buildozer cython virtualenv

      - name: Install Android SDK and NDK
        run: |
          export ANDROID_SDK_ROOT=/usr/local/lib/android/sdk
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          cd $ANDROID_SDK_ROOT/cmdline-tools
          curl -o sdk-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip sdk-tools.zip
          rm sdk-tools.zip
          mv cmdline-tools latest || true
          cd ~

          export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH
          yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses || true
          sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;33.0.2"

          # NDK - починаємо з 23 (найстабільніший)
          for version in 23.2.8568313 28.0.13004108 25.2.9519653; do
            if sdkmanager --sdk_root=$ANDROID_SDK_ROOT "ndk;$version"; then
              echo "Using NDK version $version"
              export ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/$version
              break
            fi
          done

          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
          echo "PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH" >> $GITHUB_ENV

      - name: Create buildozer.spec if not exists
        run: |
          if [ ! -f buildozer.spec ]; then
            cat > buildozer.spec <<EOF
[app]
title = My Application
package.name = myapp
package.domain = org.test
source.dir = .
source.include_exts = py,png,jpg,kv,atlas
version = 0.1
requirements = kivy==2.1.0
orientation = portrait
fullscreen = 0

[buildozer]
log_level = 2
warn_on_root = 1
android.api = 33
android.minapi = 21
android.sdk = 33
android.ndk = 23b
android.ndk_path = $ANDROID_NDK_HOME
android.sdk_path = $ANDROID_SDK_ROOT
android.accept_sdk_license = True
android.accept_ndk_license = True
android.gradle_dependencies = com.android.support:multidex:1.0.3
android.arch = armeabi-v7a
android.debug = 1
android.logcat_filters = *:S python:D
android.add_src = src
android.add_jars = libs/*.jar
android.add_assets = assets/*.*
p4a.local_recipes = ./recipes
p4a.bootstrap = sdl2
p4a.branch = develop
android.gradle_source_compatibility = 17
android.gradle_target_compatibility = 17
EOF
          fi

      - name: Apply libffi patch
        run: |
          mkdir -p patches
          cat > patches/libffi_fix.patch << EOF
--- a/configure.ac
+++ b/configure.ac
@@ -212,7 +212,11 @@
 AC_PROG_LIBTOOL
 
 # Check if the tool supports the symbol prefix
-LT_SYS_SYMBOL_USCORE
+m4_ifdef([LT_SYS_SYMBOL_USCORE], 
+         [LT_SYS_SYMBOL_USCORE],
+         [AC_MSG_WARN([LT_SYS_SYMBOL_USCORE not found, skipping])]
+)
+
 
 AC_CONFIG_FILES([Makefile include/Makefile testsuite/Makefile man/Makefile])
 AC_CONFIG_FILES([libffi.pc], [chmod +x libffi.pc])
EOF

      - name: Try building APK with multiple p4a branches
        run: |
          set -e
          for branch in develop master 2024.06.12; do
            echo "Trying p4a.branch=$branch"
            sed -i "s/^p4a.branch = .*/p4a.branch = $branch/" buildozer.spec || echo "p4a.branch = $branch" >> buildozer.spec
            if buildozer android debug; then
              echo "Build succeeded with p4a.branch=$branch"
              break
            else
              echo "Build failed with p4a.branch=$branch, trying next..."
            fi
          done

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: myapp-apk
          path: bin/*.apk
