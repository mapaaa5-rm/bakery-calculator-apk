name: Build APK with Buildozer - Corrected Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies and Buildozer
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip python3-pip autoconf automake libtool pkg-config \
          zlib1g-dev libncurses5-dev libffi-dev libssl-dev cmake make gcc g++ \
          autoconf-archive libtool-bin patchelf
        pip install --upgrade pip
        pip install buildozer==1.5.0 cython==0.29.34

    - name: Install and configure Android SDK
      run: |
        # Accept licenses before installation
        yes | sudo /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        echo "=== Installing Android components ==="
        # Define NDK versions to try
        NDK_VERSIONS=("23.2.8568313" "25.1.8937393" "28.2.13676358" "21.4.7075529")
        
        # Loop to find and install a working NDK version
        for ndk_version in "${NDK_VERSIONS[@]}"; do
          echo "Trying to install NDK $ndk_version"
          if sudo /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "ndk;$ndk_version"; then
            echo "SELECTED_NDK_VERSION=$ndk_version" >> $GITHUB_ENV
            break
          fi
        done
        
        # Install required build-tools and platforms
        sudo /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0" "platforms;android-34" "platform-tools"

    - name: Configure Buildozer
      run: |
        echo "=== Creating buildozer.spec ==="
        NDK_VERSION=${SELECTED_NDK_VERSION:-23.2.8568313}
        
        cat > buildozer.spec <<EOF
[app]
title = BakeryCalculator
package.name = BakeryCalculator
package.domain = org.roman
source.dir = .
source.include_exts = py,png,jpg,kv,atlas,spec
version = 1.0
requirements = kivy==2.1.0
android.api = 34
android.minapi = 21
android.build_tools = 34.0.0
android.ndk = $NDK_VERSION
android.sdk_path = /usr/local/lib/android/sdk
android.ndk_path = /usr/local/lib/android/sdk/ndk/$NDK_VERSION
android.archs = arm64-v8a, armeabi-v7a
fullscreen = 0
description = Простий калькулятор для пекарні
orientation = portrait
android.permissions = INTERNET
android.gradle_source_compatibility = 17
android.gradle_target_compatibility = 17
android.skip_update = True
p4a.skip_ant = True
android.accept_sdk_license = True
p4a.branch = develop

[buildozer]
log_level = 2
warn_on_root = 1
EOF
        
        echo "buildozer.spec content:"
        cat buildozer.spec

    - name: Prepare libffi patch (Optional, if needed)
      run: |
        mkdir -p patches
        cat > patches/libffi_fix.patch << 'EOF'
--- a/configure.ac
+++ b/configure.ac
@@ -212,7 +212,11 @@
 AC_PROG_LIBTOOL
 
 # Check if the tool supports the symbol prefix
-LT_SYS_SYMBOL_USCORE
+m4_ifdef([LT_SYS_SYMBOL_USCORE], 
+         [LT_SYS_SYMBOL_USCORE],
+         [AC_MSG_WARN([LT_SYS_SYMBOL_USCORE not found, skipping])]
+)
+
 AC_CONFIG_FILES([Makefile include/Makefile testsuite/Makefile man/Makefile])
 AC_CONFIG_FILES([libffi.pc], [chmod +x libffi.pc])
EOF

    - name: Build APK with retry logic
      run: |
        echo "=== Starting build process ==="
        NDK_VERSION=${SELECTED_NDK_VERSION:-23.2.8568313}
        
        # Set environment variables for buildozer
        export ANDROID_HOME="/usr/local/lib/android/sdk"
        export ANDROID_NDK_HOME="/usr/local/lib/android/sdk/ndk/$NDK_VERSION"
        
        # Define python-for-android branches to attempt
        P4A_BRANCHES=("develop" "master")
        
        for p4a_branch in "${P4A_BRANCHES[@]}"; do
          echo "--- Attempting build with p4a.branch = $p4a_branch ---"
          
          # Update the p4a.branch in buildozer.spec for the current attempt
          sed -i "s|^p4a.branch =.*|p4a.branch = $p4a_branch|" buildozer.spec
          
          # Clean any previous attempt's artifacts before starting
          buildozer android clean || true
          
          # Attempt the build and log output to a file
          if buildozer -v android debug 2>&1 | tee "build_${p4a_branch}.log"; then
            if ls bin/*.apk 1>/dev/null 2>&1; then
              echo "SUCCESSFUL_BRANCH=$p4a_branch" >> $GITHUB_ENV
              echo "Build with branch $p4a_branch succeeded!"
              break
            fi
          fi
          echo "Build with branch $p4a_branch failed. Trying next branch..."
        done
        
        # Final check for APK and exit status
        if ls bin/*.apk 1>/dev/null 2>&1; then
          echo "🎉 APK built successfully using branch: ${SUCCESSFUL_BRANCH}"
          ls -la bin/
        else
          echo "💥 All build attempts failed."
          # Display the last 50 lines from all log files for easier debugging
          tail -n 50 build_*.log || true
          exit 1
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: BakeryCalculator-APK-${{ env.SUCCESSFUL_BRANCH }}
        path: bin/*.apk
        retention-days: 7

    - name: Upload build logs
      if: always() # Always upload logs, even on failure
      uses: actions/upload-artifact@v4
      with:
        name: Build-Logs
        path: |
          build_*.log
          .buildozer/logs/
        retention-days: 3

